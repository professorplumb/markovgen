##
# Given a model filename, generates a bunch of sentences.
##

import argparse
import common
import logging
import random
import sys

def parse_args():
    parser = argparse.ArgumentParser(description="Generates a bunch of sentences given a Markov model as generated by buildmodel.py")
    parser.add_argument("-m","--model_fn", help="Input filename for generated model", required=True)
    parser.add_argument("-k","--num_sentences", help="Number of sentences to generate", default=10) # TODO parse as an integer
    return vars(parser.parse_args())

def select_token(ngram_model, model_key):
    if model_key not in ngram_model:
        return None


    all_items = ngram_model[model_key].items()
    total_weight = sum( weight for val, weight in all_items )

    # shuffle up the items, select a random position in the total weight and return that value
    random.shuffle(all_items)
    selected = random.randint(1, total_weight)
    pos = 0
    for val, weight in all_items:
        pos += weight
        if pos >= selected:
            return val

    # just in case
    raise Exception, "Uh oh.  We expected to have exhausted the entire weight.  Wha happen?"

def generate_sentence(model):
    ngrams_available = max(model.iterkeys())

    sentence = [common.START_TOK]
    while True:
        # fall back less-specific models
        token = None
        for ngrams_to_use in xrange(min(len(sentence), ngrams_available), 0, -1):
            model_key = tuple(sentence[-ngrams_to_use:])
            token = select_token(model[ngrams_to_use], model_key)

            if token is not None:
                break

        if token is None:
            raise Exception, "Couldn't find anything with context %s." % (sentence,)

        logging.debug("Selected token '%s' given context %s" % (token, model_key))

        if token == common.END_TOK:
            return " ".join(sentence[1:])
        if len(sentence) > 100:
            raise Exception, "Hm, we should have ended this sentence at some point..."

        sentence.append(token)

def main():
    common.configure_logging()
    args = parse_args()
    model = common.load_model(args["model_fn"])

    for i in xrange(args["num_sentences"]):
        print generate_sentence(model)

if __name__ == "__main__":
    main()
